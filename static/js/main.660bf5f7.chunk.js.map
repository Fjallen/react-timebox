{"version":3,"sources":["sounds/Recording.mp3","components/Timer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","id","this","props","hours","minutes","seconds","Component","App","state","clicked","doing","completeTimer","handleMinuteChange","bind","handleHoursChange","startCountDown","countSeconds","countMinutes","countHours","playSound","handleDoingChange","handleYes","handleNo","beep","UIfx","MyVoice","setState","minute","event","target","value","play","setInterval","onClick","type","onChange","min","max","required","disabled","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.660bf5f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Recording.07d1db13.mp3\";","import React, {Component} from 'react'\r\n\r\nimport './Timer.css'\r\nclass Timer extends Component{\r\n    render(){\r\n        return(\r\n            <div id=\"time-wrapper\">\r\n                <h1 id=\"time\">{this.props.hours}:{this.props.minutes}:{this.props.seconds}</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Timer;","import React, {Component} from 'react';\nimport './App.css';\nimport Timer from \"./components/Timer\"\nimport UIfx from 'uifx';\nimport MyVoice from \"./sounds/Recording.mp3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seconds: 0,\n      hours:0,\n      minutes:10,\n      clicked : false,\n      doing:\"\",\n      completeTimer: false\n    }\n    this.handleMinuteChange = this.handleMinuteChange.bind(this);\n    this.handleHoursChange=this.handleHoursChange.bind(this);\n    this.startCountDown = this.startCountDown.bind(this);\n    this.countSeconds = this.countSeconds.bind(this);\n    this.countMinutes = this.countMinutes.bind(this);\n    this.countHours = this.countHours.bind(this);\n    this.playSound=this.playSound.bind(this);\n    this.handleDoingChange = this.handleDoingChange.bind(this);\n    this.handleYes = this.handleYes.bind(this);\n    this.handleNo = this.handleNo.bind(this);\n    this.beep = new UIfx(MyVoice);\n  }\n  handleYes(){\n    this.setState({\n      minute:10\n    })\n  }\n  handleNo(){\n    this.setState({\n      minute:10\n    })\n  }\n  handleDoingChange(event){\n    this.setState({\n      doing:event.target.value\n    })\n  }\n  handleHoursChange(event){\n    this.setState({\n      hours:event.target.value\n    })\n  }\n  playSound(){\n    this.beep.play();\n  }\n\n  handleMinuteChange(event) {\n    this.setState({\n      minutes: event.target.value\n    })\n  };\n\n  countSeconds() {\n    if (this.state.seconds ==0 && this.state.minutes ==0 && this.state.hours==0){\n      this.playSound();\n      this.setState({\n        completeTimer:true\n      })\n    }else{\n    if (this.state.seconds > 0){\n      this.setState({\n        seconds: this.state.seconds -1\n      }) \n    }\n    else{\n      this.setState({\n        seconds:59\n      })\n      this.countMinutes()\n    }\n  }\n}\n  \n  countMinutes(){\n    if (this.state.minutes > 0){\n      this.setState({\n        minutes: this.state.minutes -1\n      })\n    }\n    else{\n      this.setState({\n        minutes:59\n      })\n      this.countHours()\n    }\n  }\n  countHours(){\n    if (this.state.minutes > 0){\n      this.setState({\n        hours: this.state.hours -1\n      })\n    }\n  }\n\n  startCountDown() {\n    setInterval(this.countSeconds, 1000);\n    this.setState({\n      clicked : true\n    })\n  }\n\n  render() {\n    if (!this.state.completeTimer){\n      return (\n        <div>\n            {!this.state.clicked &&\n              <div id=\"input-form\">\n                <h1>How long will you work?</h1>\n                  Hour: <input type=\"number\" value={this.props.hours} onChange={this.handleHoursChange} min=\"0\" max=\"4\" required/>\n                  Minute: <input type=\"number\" value={this.props.minutes} onChange={this.handleMinuteChange} min=\"0\" max=\"60\" required/> \n                <h1>What are you working on?</h1>\n                  <input type=\"text\" value={this.state.doing} onChange={this.handleDoingChange} required />\n              </div>\n            }\n            {this.state.clicked &&\n            <div id=\"good-luck\">\n              <h1>Good luck with {this.state.doing}</h1>\n            </div>\n            }\n            <Timer hours={this.state.hours} minutes={this.state.minutes} seconds={this.state.seconds} />\n            {!this.state.clicked&&\n              <div id=\"button\">\n                <button disabled={!this.state.minutes} onClick={this.startCountDown}>Start</button>\n              </div>\n            }\n        </div>\n      );\n    }\n    else{\n      return (\n        <div>\n          <h1>Did you finish what your task?</h1>\n          <button onClick={this.handleYes}>Yes</button>\n          <button onClick={this.handleNo}>No</button>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}